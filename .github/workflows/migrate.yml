name: Database Migrations

on:
  push:
    branches: [main]
    paths:
      - "supabase/migrations/**"
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  migrate-production:
    name: Run Production Migrations
    runs-on: ubuntu-latest

    # Only run on main branch
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check migration status (Custom Scripts)
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NODE_ENV: production
        run: |
          echo "üìä Checking current migration status..."
          npm run db:status || echo "‚ö†Ô∏è Status check skipped (optional)"

      - name: Link to Production Project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "üîó Linking to ethniqrootz-prod (project ref: sxveqitmcfrhmagycahx)..."
          npx supabase link --project-ref sxveqitmcfrhmagycahx

      - name: Run migrations (Supabase CLI - Recommended)
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "üöÄ Running production migrations via Supabase CLI..."
          echo "üìç Target: ethniqrootz-prod (project ref: sxveqitmcfrhmagycahx)"
          npx supabase db push

      - name: Verify migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "‚úÖ Verifying migration status..."
          npx supabase migration list
          echo "üéâ Migration workflow completed successfully!"

      - name: Notify on success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('‚úÖ Production migrations completed successfully');
            console.log(`üìã Workflow: ${context.workflow}`);
            console.log(`üîó Run URL: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`);

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üö® Production Migration Failed',
                body: `Migration failed in workflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}\n\n**Error Details:**\n- Workflow: ${context.workflow}\n- Job: ${context.job}\n- Commit: ${context.sha}\n- Branch: ${context.ref}\n\nPlease check the workflow logs and fix the migration issues.`,
                labels: ['bug', 'database', 'urgent']
              });
              console.log('‚úÖ Issue created successfully');
            } catch (error) {
              console.error('‚ùå Failed to create issue:', error.message);
              console.log('Migration failed but issue creation also failed. Check workflow logs manually.');
            }
