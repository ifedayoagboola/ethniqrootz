"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/search/page",{

/***/ "(app-pages-browser)/./src/hooks/useSaves.ts":
/*!*******************************!*\
  !*** ./src/hooks/useSaves.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSavesEnhanced: () => (/* binding */ useSavesEnhanced)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _stores_saveStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/stores/saveStore */ \"(app-pages-browser)/./src/stores/saveStore.ts\");\n/* harmony import */ var _stores_loadingStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/stores/loadingStore */ \"(app-pages-browser)/./src/stores/loadingStore.ts\");\n/* harmony import */ var _lib_savesEnhanced__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/savesEnhanced */ \"(app-pages-browser)/./src/lib/savesEnhanced.ts\");\n\n\n\n\nfunction useSavesEnhanced() {\n    const { savedProducts, saveCounts, error, setSavedProducts, addSavedProduct, removeSavedProduct, setSaveCount, setError, isProductSaved: isProductSavedInStore, getSaveCount: getSaveCountFromStore, clearError, batchUpdateSaveData } = (0,_stores_saveStore__WEBPACK_IMPORTED_MODULE_1__.useSaveStore)();\n    const { setLoading } = (0,_stores_loadingStore__WEBPACK_IMPORTED_MODULE_2__.useLoadingStore)();\n    // Load user's saved products on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useSavesEnhanced.useEffect\": ()=>{\n            loadUserSavedProducts();\n        }\n    }[\"useSavesEnhanced.useEffect\"], []);\n    const loadUserSavedProducts = async ()=>{\n        setLoading(true, 'Loading saved products...');\n        setError(null);\n        try {\n            const result = await (0,_lib_savesEnhanced__WEBPACK_IMPORTED_MODULE_3__.getUserSavedProducts)();\n            if (result.success && result.productIds) {\n                setSavedProducts(result.productIds);\n            } else if (result.error) {\n                setError(result.error);\n            }\n        } catch (error) {\n            setError('Failed to load saved products');\n        } finally{\n            setLoading(false);\n        }\n    };\n    // Batch load save data for multiple products\n    const loadProductsSaveData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSavesEnhanced.useCallback[loadProductsSaveData]\": async (productIds)=>{\n            try {\n                const result = await (0,_lib_savesEnhanced__WEBPACK_IMPORTED_MODULE_3__.batchGetProductsSaveData)(productIds);\n                if (result.success && result.data) {\n                    batchUpdateSaveData(result.data);\n                }\n            } catch (error) {\n                console.error('Error loading products save data:', error);\n            }\n        }\n    }[\"useSavesEnhanced.useCallback[loadProductsSaveData]\"], [\n        batchUpdateSaveData\n    ]);\n    const loadProductSaveCount = async (productId)=>{\n        try {\n            const result = await (0,_lib_savesEnhanced__WEBPACK_IMPORTED_MODULE_3__.getProductSaveCount)(productId);\n            if (result.success && result.count !== undefined) {\n                setSaveCount(productId, result.count);\n            }\n        } catch (error) {\n            console.error('Error loading save count:', error);\n        }\n    };\n    const toggleSave = async (productId)=>{\n        setLoading(true, 'Saving...');\n        setError(null);\n        try {\n            const isCurrentlySaved = isProductSavedInStore(productId);\n            const result = isCurrentlySaved ? await (0,_lib_savesEnhanced__WEBPACK_IMPORTED_MODULE_3__.unsaveProduct)(productId) : await (0,_lib_savesEnhanced__WEBPACK_IMPORTED_MODULE_3__.saveProduct)(productId);\n            if (result.success) {\n                if (isCurrentlySaved) {\n                    removeSavedProduct(productId);\n                } else {\n                    addSavedProduct(productId);\n                }\n                if (result.saveCount !== undefined) {\n                    setSaveCount(productId, result.saveCount);\n                }\n                return {\n                    success: true\n                };\n            } else {\n                setError(result.error || 'Failed to save product');\n                return {\n                    success: false,\n                    error: result.error\n                };\n            }\n        } catch (error) {\n            const errorMessage = 'Failed to save product';\n            setError(errorMessage);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        } finally{\n            setLoading(false);\n        }\n    };\n    // Batch toggle multiple saves\n    const batchToggleSavesAction = async (productIds, action)=>{\n        setLoading(true, \"\".concat(action === 'save' ? 'Saving' : 'Removing', \" products...\"));\n        setError(null);\n        try {\n            const result = await (0,_lib_savesEnhanced__WEBPACK_IMPORTED_MODULE_3__.batchToggleSaves)(productIds, action);\n            if (result.success && result.results) {\n                // Update store with batch results\n                result.results.forEach((param)=>{\n                    let { productId, isSaved, saveCount } = param;\n                    if (isSaved) {\n                        addSavedProduct(productId);\n                    } else {\n                        removeSavedProduct(productId);\n                    }\n                    setSaveCount(productId, saveCount);\n                });\n                return {\n                    success: true,\n                    results: result.results\n                };\n            } else {\n                setError(result.error || 'Failed to batch toggle saves');\n                return {\n                    success: false,\n                    error: result.error\n                };\n            }\n        } catch (error) {\n            const errorMessage = 'Failed to batch toggle saves';\n            setError(errorMessage);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        } finally{\n            setLoading(false);\n        }\n    };\n    const checkProductSaveStatus = async (productId)=>{\n        try {\n            const result = await (0,_lib_savesEnhanced__WEBPACK_IMPORTED_MODULE_3__.isProductSaved)(productId);\n            if (result.success && result.isSaved !== undefined) {\n                if (result.isSaved) {\n                    addSavedProduct(productId);\n                } else {\n                    removeSavedProduct(productId);\n                }\n            }\n        } catch (error) {\n            console.error('Error checking save status:', error);\n        }\n    };\n    return {\n        // State\n        savedProducts: Array.from(savedProducts),\n        saveCounts,\n        error,\n        // Actions\n        toggleSave,\n        batchToggleSaves: batchToggleSavesAction,\n        loadProductSaveCount,\n        loadProductsSaveData,\n        checkProductSaveStatus,\n        loadUserSavedProducts,\n        clearError,\n        // Helpers\n        isProductSaved: isProductSavedInStore,\n        getSaveCount: getSaveCountFromStore\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useSaves.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/savesEnhanced.ts":
/*!**********************************!*\
  !*** ./src/lib/savesEnhanced.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   batchGetProductsSaveData: () => (/* binding */ batchGetProductsSaveData),\n/* harmony export */   batchToggleSaves: () => (/* binding */ batchToggleSaves),\n/* harmony export */   clearSaveCache: () => (/* binding */ clearSaveCache),\n/* harmony export */   getProductSaveCount: () => (/* binding */ getProductSaveCount),\n/* harmony export */   getUserSavedProducts: () => (/* binding */ getUserSavedProducts),\n/* harmony export */   getUserSavedProductsWithMetadata: () => (/* binding */ getUserSavedProductsWithMetadata),\n/* harmony export */   isProductSaved: () => (/* binding */ isProductSaved),\n/* harmony export */   saveProduct: () => (/* binding */ saveProduct),\n/* harmony export */   unsaveProduct: () => (/* binding */ unsaveProduct)\n/* harmony export */ });\n/* harmony import */ var _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/integrations/supabase/client */ \"(app-pages-browser)/./src/integrations/supabase/client.ts\");\n\n// Request throttling and caching\nconst requestCache = new Map();\nconst pendingRequests = new Map();\nconst REQUEST_CACHE_DURATION = 30000; // 30 seconds\nconst REQUEST_THROTTLE_DELAY = 1000; // 1 second between requests\n// Throttled request helper with retry logic\nasync function throttledRequest(key, requestFn) {\n    let useCache = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true, maxRetries = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 2;\n    // Check cache first\n    if (useCache) {\n        const cached = requestCache.get(key);\n        if (cached && Date.now() - cached.timestamp < REQUEST_CACHE_DURATION) {\n            return cached.data;\n        }\n    }\n    // Check if request is already pending\n    if (pendingRequests.has(key)) {\n        return pendingRequests.get(key);\n    }\n    // Create new request with retry logic\n    const requestPromise = new Promise(async (resolve, reject)=>{\n        let attempts = 0;\n        const attemptRequest = async ()=>{\n            try {\n                attempts++;\n                const result = await requestFn();\n                if (useCache) {\n                    requestCache.set(key, {\n                        data: result,\n                        timestamp: Date.now()\n                    });\n                }\n                resolve(result);\n            } catch (error) {\n                if (attempts < maxRetries && shouldRetry(error)) {\n                    // Exponential backoff: 500ms, 1000ms, 2000ms\n                    const delay = 500 * Math.pow(2, attempts - 1);\n                    setTimeout(attemptRequest, delay);\n                } else {\n                    reject(error);\n                }\n            } finally{\n                if (attempts >= maxRetries) {\n                    pendingRequests.delete(key);\n                }\n            }\n        };\n        // Initial delay for throttling\n        setTimeout(attemptRequest, REQUEST_THROTTLE_DELAY);\n    });\n    pendingRequests.set(key, requestPromise);\n    return requestPromise;\n}\n// Helper to determine if an error should trigger a retry\nfunction shouldRetry(error) {\n    var _error_message;\n    if (!error) return false;\n    // Retry on network errors or connection issues\n    const message = ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.toLowerCase()) || '';\n    return message.includes('network') || message.includes('connection') || message.includes('timeout') || message.includes('err_connection_closed') || message.includes('err_failed');\n}\n// Cache invalidation helper\nfunction invalidateCache(pattern) {\n    const keysToDelete = [];\n    requestCache.forEach((_, key)=>{\n        if (key.includes(pattern)) {\n            keysToDelete.push(key);\n        }\n    });\n    keysToDelete.forEach((key)=>requestCache.delete(key));\n}\n// Clear all cache (useful for logout or major state changes)\nfunction clearSaveCache() {\n    requestCache.clear();\n    pendingRequests.clear();\n}\n// Enhanced client-side save operations with better error handling and performance\nasync function saveProduct(productId) {\n    try {\n        const { data: { user } } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) {\n            return {\n                success: false,\n                error: 'User not authenticated'\n            };\n        }\n        const { error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('saves').insert({\n            user_id: user.id,\n            product_id: productId\n        });\n        if (error) {\n            // Handle unique constraint violation gracefully\n            if (error.code === '23505') {\n                return {\n                    success: true,\n                    saveCount: 0\n                }; // Already saved\n            }\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n        // Invalidate cache for this product\n        invalidateCache(productId);\n        // Get updated save count\n        const { data: countData, error: countError } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc('get_product_save_count', {\n            product_uuid: productId\n        });\n        if (countError) {\n            console.error('Error getting save count:', countError);\n        }\n        return {\n            success: true,\n            saveCount: countData || 0\n        };\n    } catch (error) {\n        console.error('Error saving product:', error);\n        return {\n            success: false,\n            error: 'Failed to save product'\n        };\n    }\n}\nasync function unsaveProduct(productId) {\n    try {\n        const { data: { user } } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) {\n            return {\n                success: false,\n                error: 'User not authenticated'\n            };\n        }\n        const { error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('saves').delete().eq('product_id', productId).eq('user_id', user.id);\n        if (error) {\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n        // Invalidate cache for this product\n        invalidateCache(productId);\n        // Get updated save count\n        const { data: countData, error: countError } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc('get_product_save_count', {\n            product_uuid: productId\n        });\n        if (countError) {\n            console.error('Error getting save count:', countError);\n        }\n        return {\n            success: true,\n            saveCount: countData || 0\n        };\n    } catch (error) {\n        console.error('Error unsaving product:', error);\n        return {\n            success: false,\n            error: 'Failed to unsave product'\n        };\n    }\n}\nasync function getUserSavedProducts() {\n    try {\n        const { data: { user } } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) {\n            return {\n                success: false,\n                error: 'User not authenticated'\n            };\n        }\n        const { data, error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('saves').select('product_id').eq('user_id', user.id).order('created_at', {\n            ascending: false\n        });\n        if (error) {\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n        const productIds = (data === null || data === void 0 ? void 0 : data.map((item)=>item.product_id)) || [];\n        return {\n            success: true,\n            productIds\n        };\n    } catch (error) {\n        console.error('Error getting saved products:', error);\n        return {\n            success: false,\n            error: 'Failed to get saved products'\n        };\n    }\n}\nasync function getProductSaveCount(productId) {\n    const cacheKey = \"save_count_\".concat(productId);\n    return throttledRequest(cacheKey, async ()=>{\n        try {\n            const { data, error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc('get_product_save_count', {\n                product_uuid: productId\n            });\n            if (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            return {\n                success: true,\n                count: data || 0\n            };\n        } catch (error) {\n            console.error('Error getting save count:', error);\n            return {\n                success: false,\n                error: 'Failed to get save count'\n            };\n        }\n    });\n}\nasync function isProductSaved(productId) {\n    const { data: { user } } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n    if (!user) {\n        return {\n            success: false,\n            error: 'User not authenticated'\n        };\n    }\n    const cacheKey = \"is_saved_\".concat(productId, \"_\").concat(user.id);\n    return throttledRequest(cacheKey, async ()=>{\n        try {\n            const { data, error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc('is_product_saved_by_user', {\n                product_uuid: productId,\n                user_uuid: user.id\n            });\n            if (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            return {\n                success: true,\n                isSaved: data || false\n            };\n        } catch (error) {\n            console.error('Error checking if product is saved:', error);\n            return {\n                success: false,\n                error: 'Failed to check save status'\n            };\n        }\n    });\n}\n// NEW: Batch operations for better performance\nasync function batchGetProductsSaveData(productIds) {\n    try {\n        const { data: { user } } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) {\n            return {\n                success: false,\n                error: 'User not authenticated'\n            };\n        }\n        const { data, error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc('get_products_save_data', {\n            product_uuids: productIds,\n            user_uuid: user.id\n        });\n        if (error) {\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n        const saveData = (data === null || data === void 0 ? void 0 : data.map((item)=>({\n                productId: item.product_id,\n                isSaved: item.is_saved,\n                saveCount: item.save_count\n            }))) || [];\n        return {\n            success: true,\n            data: saveData\n        };\n    } catch (error) {\n        console.error('Error getting batch save data:', error);\n        return {\n            success: false,\n            error: 'Failed to get batch save data'\n        };\n    }\n}\nasync function batchToggleSaves(productIds, action) {\n    try {\n        const { data: { user } } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) {\n            return {\n                success: false,\n                error: 'User not authenticated'\n            };\n        }\n        const { data, error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc('batch_toggle_saves', {\n            product_uuids: productIds,\n            user_uuid: user.id,\n            action: action\n        });\n        if (error) {\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n        const results = (data === null || data === void 0 ? void 0 : data.map((item)=>({\n                productId: item.product_id,\n                isSaved: action === 'save',\n                saveCount: item.new_save_count\n            }))) || [];\n        return {\n            success: true,\n            results\n        };\n    } catch (error) {\n        console.error('Error batch toggling saves:', error);\n        return {\n            success: false,\n            error: 'Failed to batch toggle saves'\n        };\n    }\n}\n// NEW: Get saved products with metadata for a dedicated saved page\nasync function getUserSavedProductsWithMetadata() {\n    try {\n        const { data: { user } } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) {\n            return {\n                success: false,\n                error: 'User not authenticated'\n            };\n        }\n        const { data, error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc('get_user_saved_products_with_metadata', {\n            user_uuid: user.id\n        });\n        if (error) {\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n        const products = (data === null || data === void 0 ? void 0 : data.map((item)=>({\n                productId: item.product_id,\n                savedAt: item.saved_at,\n                productTitle: item.product_title,\n                productPricePence: item.product_price_pence,\n                productImages: item.product_images || []\n            }))) || [];\n        return {\n            success: true,\n            products\n        };\n    } catch (error) {\n        console.error('Error getting saved products with metadata:', error);\n        return {\n            success: false,\n            error: 'Failed to get saved products with metadata'\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/savesEnhanced.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/stores/saveStore.ts":
/*!*********************************!*\
  !*** ./src/stores/saveStore.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSaveStore: () => (/* binding */ useSaveStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n\n\nconst useSaveStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.devtools)((set, get)=>({\n        // Initial state\n        savedProducts: new Set(),\n        saveCounts: {},\n        error: null,\n        // Actions\n        setSavedProducts: (productIds)=>{\n            set({\n                savedProducts: new Set(productIds)\n            });\n        },\n        addSavedProduct: (productId)=>{\n            const { savedProducts, saveCounts } = get();\n            const newSavedProducts = new Set(savedProducts);\n            newSavedProducts.add(productId);\n            set({\n                savedProducts: newSavedProducts,\n                saveCounts: {\n                    ...saveCounts,\n                    [productId]: (saveCounts[productId] || 0) + 1\n                }\n            });\n        },\n        removeSavedProduct: (productId)=>{\n            const { savedProducts, saveCounts } = get();\n            const newSavedProducts = new Set(savedProducts);\n            newSavedProducts.delete(productId);\n            set({\n                savedProducts: newSavedProducts,\n                saveCounts: {\n                    ...saveCounts,\n                    [productId]: Math.max((saveCounts[productId] || 1) - 1, 0)\n                }\n            });\n        },\n        setSaveCount: (productId, count)=>{\n            set((state)=>({\n                    saveCounts: {\n                        ...state.saveCounts,\n                        [productId]: count\n                    }\n                }));\n        },\n        // Batch update multiple products' save data\n        batchUpdateSaveData: (data)=>{\n            const { savedProducts, saveCounts } = get();\n            const newSavedProducts = new Set(savedProducts);\n            const newSaveCounts = {\n                ...saveCounts\n            };\n            data.forEach((param)=>{\n                let { productId, isSaved, saveCount } = param;\n                if (isSaved) {\n                    newSavedProducts.add(productId);\n                } else {\n                    newSavedProducts.delete(productId);\n                }\n                newSaveCounts[productId] = saveCount;\n            });\n            set({\n                savedProducts: newSavedProducts,\n                saveCounts: newSaveCounts\n            });\n        },\n        setError: (error)=>{\n            set({\n                error\n            });\n        },\n        isProductSaved: (productId)=>{\n            return get().savedProducts.has(productId);\n        },\n        getSaveCount: (productId)=>{\n            return get().saveCounts[productId] || 0;\n        },\n        clearError: ()=>{\n            set({\n                error: null\n            });\n        },\n        reset: ()=>{\n            set({\n                savedProducts: new Set(),\n                saveCounts: {},\n                error: null\n            });\n        }\n    }), {\n    name: 'save-store-enhanced'\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/stores/saveStore.ts\n"));

/***/ })

});